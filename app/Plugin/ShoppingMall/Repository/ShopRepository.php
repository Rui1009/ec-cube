<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\ShoppingMall\Repository;

use Eccube\Common\EccubeConfig;
use Eccube\Doctrine\Query\Queries;
use Eccube\Repository\AbstractRepository;
use Eccube\Repository\QueryKey;
use Eccube\Util\StringUtil;
use Plugin\ShoppingMall\Entity\Shop;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ShopRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    protected $queries;

    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * ShopRepository constructor.
     */
    public function __construct(RegistryInterface $registry, Queries $queries, EccubeConfig $eccubeConfig)
    {
        parent::__construct($registry, Shop::class);
        $this->queries = $queries;
        $this->eccubeConfig = $eccubeConfig;
    }

//     /**
//      * Find the Products with sorted ClassCategories.
//      *
//      * @param array $ids Shop in ids
//      * @param string $indexBy The index for the from.
//      *
//      * @return ArrayCollection|array
//      */
//     public function findCompanies(array $ids)
//     {
//         if (count($ids) < 1) {
//             return [];
//         }
//         $qb = $this->createQueryBuilder('c');
//         $qb->where($qb->expr()->in('c.id', $ids));
//
//         $companies = $qb
//         ->getQuery()
//         ->useResultCache(true, $this->eccubeConfig['eccube_result_cache_lifetime_short'])
//         ->getResult();
//
//         return $companies;
//     }

    /**
     * get query builder
     *
     * @param  array $searchData
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilderBySearchData($searchData)
    {
        $qb = $this->createQueryBuilder('c');

        $categoryJoin = false;
        if (!empty($searchData['category_id']) && $searchData['category_id']) {
            $Categories = $searchData['category_id']->getSelfAndDescendants();
            if ($Categories) {
                $qb
                    ->innerJoin('c.CompanyCategories', 'ccc')
                    ->innerJoin('ccc.CategoryCompany', 'cc')
                    ->andWhere($qb->expr()->in('ccc.CategoryCompany', ':Categories'))
                    ->setParameter('Categories', $Categories);
                $categoryJoin = true;
            }
        }
        if (isset($searchData['name']) && StringUtil::isNotBlank($searchData['name'])) {
            $keywords = preg_split('/[\sã€€]+/u', str_replace(['%', '_'], ['\\%', '\\_'], $searchData['name']), -1, PREG_SPLIT_NO_EMPTY);

            foreach ($keywords as $index => $keyword) {
                $key = sprintf('keyword%s', $index);
                $qb
                    ->andWhere(sprintf('NORMALIZE(c.name) LIKE NORMALIZE(:%s) OR
                        NORMALIZE(c.search_word) LIKE NORMALIZE(:%s)',
                        $key, $key, $index, $index, $index, $index, $key))
                    ->setParameter($key, '%'.$keyword.'%');
            }
        }

        return $this->queries->customize(QueryKey::COMPANY_SEARCH, $qb, $searchData);
    }

    /**
     * Shop create/update
     *
     * @param Shop $Shop
     *
     * @return bool
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function save($Shop)
    {
        $em = $this->getEntityManager();

        if (!$Shop->getId()) {
            $sortNo = $this->createQueryBuilder('s')
                ->select('MAX(s.sort_no)')
                ->getQuery()
                ->getSingleScalarResult();
            if (!$sortNo) {
                $sortNo = 0;
            }
            $Shop->setSortNo($sortNo + 1);

            $em->createQueryBuilder()
                ->update(Shop::class, 's')
                ->set('s.sort_no', 's.sort_no + 1')
                ->where('s.sort_no > :sort_no')
                ->setParameter('sort_no', $sortNo)
                ->getQuery()
                ->execute();
        }

        $em->persist($Shop);
        $em->flush($Shop);

        return true;
    }

    /**
     * Delete maker.
     *
     * @param Shop $Shop
     *
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function delete($Shop)
    {
        log_info('oooo');
        $em = $this->getEntityManager();
        $em->remove($Shop);
        $em->flush($Shop);
    }

    /**
     * Move sortNo.
     *
     * @return array
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Doctrine\ORM\ORMException
     */
    public function moveSortNo(array $sortNos)
    {
        $results = [];
        foreach ($sortNos as $id => $sortNo) {
            /* @var $Shop Shop */
            $Shop = $this->find($id);
            if ($Shop->getSortNo() == $sortNo) {
                continue;
            }
            $results[$id] = $sortNos;
            $Shop->setSortNo($sortNo);
            $this->getEntityManager()->persist($Shop);
            $this->getEntityManager()->flush($Shop);
        }

        return $results;
    }
}
